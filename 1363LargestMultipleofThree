/*
Hint-
(1/4)
A number is a multiple of three if and only if its sum of digits is a multiple of three.
(2/4)
Use dynamic programming.
(3/4)
To find the maximum number, try to maximize the number of digits of the number.
(4/4)
Sort the digits in descending order to find the maximum number.
*/

/* There could be 3 cases-
1. sum of the digits is divisible by 3, simply sort the array digits in reverse order and return it;
2. if(sum%3==1)-
    if(found) Remove one element whose remainder is 1;
    else if() Remove two elements whose remainder are 2;  (2+2=4, 4%3=1)
    else, return "";
3. if(sum%3==2)-
    if(found) Remove one element whose remainder is 2;
    else if() Remove two elements whose remainder are 1;  (1+1=2, 2%3=2)
    else, return "";

* To convert a integer into a character -> ""+digits[i]; 
*/
class Solution {
    public String largestMultipleOfThree(int[] digits) {
        int n = digits.length;
        int sum = 0;
        Arrays.sort(digits);
        int[] rem = new int[2];   // For the case when removal of one element is not enough to get you sum%3;
        Arrays.fill(rem,-1);

        for(int i=0; i<n; i++) {
            sum += digits[i];
        }


        if(sum%3==0) {
            if(digits[n-1]==0) return "0";   // Number given is 0;
            String str = "";
            for(int i=n-1; i>=0; i--) {
                str += ""+digits[i];  // Appends the current number in str;
                // char c = (char)(digits[i]+'0');    
                // str += c;
            }
            return str;
        }
        else if(sum%3==1) {
            boolean found = false;
            for(int i=0; i<n; i++) {
                if(digits[i]%3==1) {
                    found = true;    // No need to remove two elements, just remove one;
                    digits[i] = -1;
                    break;
                }  
            }

            if(found==false) {    // Must remove two elements to get the largest multiple;
                for(int i=0; i<n; i++) {
                    if(digits[i]%3==2) {
                        if(rem[0]==-1) rem[0] = i;
                        else {
                            rem[1] = i;
                            break;
                        }
                    }
                }
                if(rem[1]!=-1) {
                    digits[rem[0]] = -1;
                    digits[rem[1]] = -1;
                }
                else return "";
            }

        }
        else {
            boolean found = false;
            for(int i=0; i<n; i++) {
                if(digits[i]%3==2) {
                    found = true;
                    digits[i] = -1;
                    break;
                }  
            }

            if(found==false) {
                for(int i=0; i<n; i++) {
                    if(digits[i]%3==1) {
                        if(rem[0]==-1) rem[0] = i;
                        else {
                            rem[1] = i;
                            break;
                        }
                    }
                }
                if(rem[1]!=-1) {
                    digits[rem[0]] = -1;
                    digits[rem[1]] = -1;
                }
                else return "";
            }
        }
        String str = "";
        for(int i=n-1; i>=0; i--) {
            if(digits[i]!=-1) str += ""+digits[i];
        }

        if(str=="") return str;   // [1,1] -> Both removed, str="", O/P: "";
        int len = str.length();
        for(int i=0; i<len; i++) {
            if(str.charAt(i)!='0') return str;    // I/P: [8,6,7,1,0] -> str="8760", str has non-zero number, return str;
            // I/P: [0,0,0,0,0,1] -> str="00000", str doesn't have any not-zero number, 00000 doesn't make any sense, just return 0;
        }
        return "0";
    }
}

Related Topics-
Array
Dynamic Programming
Greedy
