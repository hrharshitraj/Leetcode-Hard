/*
Hint-
(1/4)
How can we divide the ideas into groups to make it easier to find valid pairs?

(2/4)
Group ideas that share the same suffix (all characters except the first) together and 
notice that a pair of ideas from the same group is invalid. 
What about pairs of ideas from different groups?

(3/4)
The first letter of the idea in the first group must not be the first letter of an idea in the second group and vice versa.

(4/4)
We can efficiently count the valid pairings for an idea if we already know how many ideas starting 
with a letter x are within a group that does not contain any ideas with starting letter y for all letters x and y.
*/

class Solution {
    public long distinctNames(String[] ideas) {
        long ans = 0;
        Set<String>[] suffixes = new Set[26];

        for (int i=0; i<26; i++)
            suffixes[i] = new HashSet<>();

        for (String idea : ideas)
            suffixes[idea.charAt(0) - 'a'].add(idea.substring(1));

        for (int i=0; i<25; i++)
            for (int j=i+1; j<26; j++) {
                int count = 0;
                for (String suffix : suffixes[i])
                    if (suffixes[j].contains(suffix))
                        count++;
                    ans += 2*(suffixes[i].size()-count) * (suffixes[j].size()-count);
            }

        return ans;
    }
}

Related Topics-
Array
Hash Table
String
Bit Manipulation
Enumeration
